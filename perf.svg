<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1206" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1189.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1189.00"> </text><svg id="frames" x="10" width="1180" total_samples="861"><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.46%)</title><rect x="0.0000%" y="1061" width="0.4646%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.35%)</title><rect x="0.4646%" y="1061" width="0.3484%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="3"/><text x="0.7146%" y="1071.50"></text></g><g><title>tc-rust`DYLD-STUB$$free (1 samples, 0.12%)</title><rect x="0.8130%" y="1061" width="0.1161%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="1"/><text x="1.0630%" y="1071.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::add_connected_component (3 samples, 0.35%)</title><rect x="0.9292%" y="1061" width="0.3484%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="3"/><text x="1.1792%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 1.51%)</title><rect x="2.3229%" y="1045" width="1.5099%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="13"/><text x="2.5729%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.12%)</title><rect x="3.8328%" y="1045" width="0.1161%" height="15" fill="rgb(232,128,0)" fg:x="33" fg:w="1"/><text x="4.0828%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.12%)</title><rect x="3.8328%" y="1029" width="0.1161%" height="15" fill="rgb(207,160,47)" fg:x="33" fg:w="1"/><text x="4.0828%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.93%)</title><rect x="3.9489%" y="1045" width="0.9292%" height="15" fill="rgb(228,23,34)" fg:x="34" fg:w="8"/><text x="4.1989%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.23%)</title><rect x="4.8780%" y="1045" width="0.2323%" height="15" fill="rgb(218,30,26)" fg:x="42" fg:w="2"/><text x="5.1280%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.23%)</title><rect x="4.8780%" y="1029" width="0.2323%" height="15" fill="rgb(220,122,19)" fg:x="42" fg:w="2"/><text x="5.1280%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.35%)</title><rect x="5.1103%" y="1045" width="0.3484%" height="15" fill="rgb(250,228,42)" fg:x="44" fg:w="3"/><text x="5.3603%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.35%)</title><rect x="5.1103%" y="1029" width="0.3484%" height="15" fill="rgb(240,193,28)" fg:x="44" fg:w="3"/><text x="5.3603%" y="1039.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.35%)</title><rect x="5.1103%" y="1013" width="0.3484%" height="15" fill="rgb(216,20,37)" fg:x="44" fg:w="3"/><text x="5.3603%" y="1023.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.12%)</title><rect x="5.4588%" y="1045" width="0.1161%" height="15" fill="rgb(206,188,39)" fg:x="47" fg:w="1"/><text x="5.7088%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.12%)</title><rect x="5.5749%" y="1045" width="0.1161%" height="15" fill="rgb(217,207,13)" fg:x="48" fg:w="1"/><text x="5.8249%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="5.6911%" y="1045" width="0.1161%" height="15" fill="rgb(231,73,38)" fg:x="49" fg:w="1"/><text x="5.9411%" y="1055.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.46%)</title><rect x="5.8072%" y="1045" width="0.4646%" height="15" fill="rgb(225,20,46)" fg:x="50" fg:w="4"/><text x="6.0572%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="6.7364%" y="1029" width="0.2323%" height="15" fill="rgb(210,31,41)" fg:x="58" fg:w="2"/><text x="6.9864%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.23%)</title><rect x="6.9686%" y="1029" width="0.2323%" height="15" fill="rgb(221,200,47)" fg:x="60" fg:w="2"/><text x="7.2186%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.35%)</title><rect x="7.2009%" y="1029" width="0.3484%" height="15" fill="rgb(226,26,5)" fg:x="62" fg:w="3"/><text x="7.4509%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.12%)</title><rect x="7.5494%" y="1029" width="0.1161%" height="15" fill="rgb(249,33,26)" fg:x="65" fg:w="1"/><text x="7.7994%" y="1039.50"></text></g><g><title>tc-rust`__rdl_alloc (1 samples, 0.12%)</title><rect x="7.6655%" y="1029" width="0.1161%" height="15" fill="rgb(235,183,28)" fg:x="66" fg:w="1"/><text x="7.9155%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.46%)</title><rect x="7.7816%" y="1013" width="0.4646%" height="15" fill="rgb(221,5,38)" fg:x="67" fg:w="4"/><text x="8.0316%" y="1023.50"></text></g><g><title>tc-rust`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.58%)</title><rect x="7.7816%" y="1029" width="0.5807%" height="15" fill="rgb(247,18,42)" fg:x="67" fg:w="5"/><text x="8.0316%" y="1039.50"></text></g><g><title>tc-rust`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.12%)</title><rect x="8.2462%" y="1013" width="0.1161%" height="15" fill="rgb(241,131,45)" fg:x="71" fg:w="1"/><text x="8.4962%" y="1023.50"></text></g><g><title>tc-rust`tc_rust::graph2::node::Node::new (1 samples, 0.12%)</title><rect x="8.2462%" y="997" width="0.1161%" height="15" fill="rgb(249,31,29)" fg:x="71" fg:w="1"/><text x="8.4962%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="8.8269%" y="1013" width="0.1161%" height="15" fill="rgb(225,111,53)" fg:x="76" fg:w="1"/><text x="9.0769%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="8.9431%" y="1013" width="0.1161%" height="15" fill="rgb(238,160,17)" fg:x="77" fg:w="1"/><text x="9.1931%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="9.0592%" y="997" width="0.2323%" height="15" fill="rgb(214,148,48)" fg:x="78" fg:w="2"/><text x="9.3092%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.46%)</title><rect x="9.2915%" y="997" width="0.4646%" height="15" fill="rgb(232,36,49)" fg:x="80" fg:w="4"/><text x="9.5415%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 1.16%)</title><rect x="10.1045%" y="981" width="1.1614%" height="15" fill="rgb(209,103,24)" fg:x="87" fg:w="10"/><text x="10.3545%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.23%)</title><rect x="11.2660%" y="933" width="0.2323%" height="15" fill="rgb(229,88,8)" fg:x="97" fg:w="2"/><text x="11.5160%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.23%)</title><rect x="11.2660%" y="917" width="0.2323%" height="15" fill="rgb(213,181,19)" fg:x="97" fg:w="2"/><text x="11.5160%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.35%)</title><rect x="11.2660%" y="949" width="0.3484%" height="15" fill="rgb(254,191,54)" fg:x="97" fg:w="3"/><text x="11.5160%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.12%)</title><rect x="11.4983%" y="933" width="0.1161%" height="15" fill="rgb(241,83,37)" fg:x="99" fg:w="1"/><text x="11.7483%" y="943.50"></text></g><g><title>tc-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.46%)</title><rect x="11.2660%" y="981" width="0.4646%" height="15" fill="rgb(233,36,39)" fg:x="97" fg:w="4"/><text x="11.5160%" y="991.50"></text></g><g><title>tc-rust`alloc::raw_vec::finish_grow (4 samples, 0.46%)</title><rect x="11.2660%" y="965" width="0.4646%" height="15" fill="rgb(226,3,54)" fg:x="97" fg:w="4"/><text x="11.5160%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.12%)</title><rect x="11.6144%" y="949" width="0.1161%" height="15" fill="rgb(245,192,40)" fg:x="100" fg:w="1"/><text x="11.8644%" y="959.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.46%)</title><rect x="12.4274%" y="965" width="0.4646%" height="15" fill="rgb(238,167,29)" fg:x="107" fg:w="4"/><text x="12.6774%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="12.8920%" y="933" width="0.1161%" height="15" fill="rgb(232,182,51)" fg:x="111" fg:w="1"/><text x="13.1420%" y="943.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 1.28%)</title><rect x="12.8920%" y="965" width="1.2776%" height="15" fill="rgb(231,60,39)" fg:x="111" fg:w="11"/><text x="13.1420%" y="975.50"></text></g><g><title>tc-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 1.28%)</title><rect x="12.8920%" y="949" width="1.2776%" height="15" fill="rgb(208,69,12)" fg:x="111" fg:w="11"/><text x="13.1420%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 1.16%)</title><rect x="13.0081%" y="933" width="1.1614%" height="15" fill="rgb(235,93,37)" fg:x="112" fg:w="10"/><text x="13.2581%" y="943.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcpy (1 samples, 0.12%)</title><rect x="14.1696%" y="965" width="0.1161%" height="15" fill="rgb(213,116,39)" fg:x="122" fg:w="1"/><text x="14.4196%" y="975.50"></text></g><g><title>tc-rust`core::fmt::Formatter::pad_integral (2 samples, 0.23%)</title><rect x="14.2857%" y="965" width="0.2323%" height="15" fill="rgb(222,207,29)" fg:x="123" fg:w="2"/><text x="14.5357%" y="975.50"></text></g><g><title>tc-rust`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.12%)</title><rect x="14.5180%" y="965" width="0.1161%" height="15" fill="rgb(206,96,30)" fg:x="125" fg:w="1"/><text x="14.7680%" y="975.50"></text></g><g><title>tc-rust`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 5.11%)</title><rect x="9.7561%" y="997" width="5.1103%" height="15" fill="rgb(218,138,4)" fg:x="84" fg:w="44"/><text x="10.0061%" y="1007.50">tc-rus..</text></g><g><title>tc-rust`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (27 samples, 3.14%)</title><rect x="11.7305%" y="981" width="3.1359%" height="15" fill="rgb(250,191,14)" fg:x="101" fg:w="27"/><text x="11.9805%" y="991.50">tc-..</text></g><g><title>tc-rust`core::fmt::Formatter::pad_integral (2 samples, 0.23%)</title><rect x="14.6341%" y="965" width="0.2323%" height="15" fill="rgb(239,60,40)" fg:x="126" fg:w="2"/><text x="14.8841%" y="975.50"></text></g><g><title>tc-rust`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.23%)</title><rect x="14.6341%" y="949" width="0.2323%" height="15" fill="rgb(206,27,48)" fg:x="126" fg:w="2"/><text x="14.8841%" y="959.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcpy (1 samples, 0.12%)</title><rect x="14.8664%" y="997" width="0.1161%" height="15" fill="rgb(225,35,8)" fg:x="128" fg:w="1"/><text x="15.1164%" y="1007.50"></text></g><g><title>tc-rust`core::fmt::Formatter::pad_integral (1 samples, 0.12%)</title><rect x="14.9826%" y="997" width="0.1161%" height="15" fill="rgb(250,213,24)" fg:x="129" fg:w="1"/><text x="15.2326%" y="1007.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.12%)</title><rect x="15.0987%" y="981" width="0.1161%" height="15" fill="rgb(247,123,22)" fg:x="130" fg:w="1"/><text x="15.3487%" y="991.50"></text></g><g><title>tc-rust`alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="15.0987%" y="965" width="0.1161%" height="15" fill="rgb(231,138,38)" fg:x="130" fg:w="1"/><text x="15.3487%" y="975.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (54 samples, 6.27%)</title><rect x="9.0592%" y="1013" width="6.2718%" height="15" fill="rgb(231,145,46)" fg:x="78" fg:w="54"/><text x="9.3092%" y="1023.50">tc-rust`..</text></g><g><title>tc-rust`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.23%)</title><rect x="15.0987%" y="997" width="0.2323%" height="15" fill="rgb(251,118,11)" fg:x="130" fg:w="2"/><text x="15.3487%" y="1007.50"></text></g><g><title>tc-rust`core::fmt::Formatter::pad_integral (1 samples, 0.12%)</title><rect x="15.2149%" y="981" width="0.1161%" height="15" fill="rgb(217,147,25)" fg:x="131" fg:w="1"/><text x="15.4649%" y="991.50"></text></g><g><title>tc-rust`__rdl_realloc (1 samples, 0.12%)</title><rect x="15.9117%" y="981" width="0.1161%" height="15" fill="rgb(247,81,37)" fg:x="137" fg:w="1"/><text x="16.1617%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.35%)</title><rect x="16.0279%" y="933" width="0.3484%" height="15" fill="rgb(209,12,38)" fg:x="138" fg:w="3"/><text x="16.2779%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="16.3763%" y="917" width="0.1161%" height="15" fill="rgb(227,1,9)" fg:x="141" fg:w="1"/><text x="16.6263%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.58%)</title><rect x="16.0279%" y="965" width="0.5807%" height="15" fill="rgb(248,47,43)" fg:x="138" fg:w="5"/><text x="16.2779%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.58%)</title><rect x="16.0279%" y="949" width="0.5807%" height="15" fill="rgb(221,10,30)" fg:x="138" fg:w="5"/><text x="16.2779%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.23%)</title><rect x="16.3763%" y="933" width="0.2323%" height="15" fill="rgb(210,229,1)" fg:x="141" fg:w="2"/><text x="16.6263%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="16.4925%" y="917" width="0.1161%" height="15" fill="rgb(222,148,37)" fg:x="142" fg:w="1"/><text x="16.7425%" y="927.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 1.39%)</title><rect x="15.3310%" y="1013" width="1.3937%" height="15" fill="rgb(234,67,33)" fg:x="132" fg:w="12"/><text x="15.5810%" y="1023.50"></text></g><g><title>tc-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.93%)</title><rect x="15.7956%" y="997" width="0.9292%" height="15" fill="rgb(247,98,35)" fg:x="136" fg:w="8"/><text x="16.0456%" y="1007.50"></text></g><g><title>tc-rust`alloc::raw_vec::finish_grow (6 samples, 0.70%)</title><rect x="16.0279%" y="981" width="0.6969%" height="15" fill="rgb(247,138,52)" fg:x="138" fg:w="6"/><text x="16.2779%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.12%)</title><rect x="16.6086%" y="965" width="0.1161%" height="15" fill="rgb(213,79,30)" fg:x="143" fg:w="1"/><text x="16.8586%" y="975.50"></text></g><g><title>tc-rust`DYLD-STUB$$free (1 samples, 0.12%)</title><rect x="16.7247%" y="1013" width="0.1161%" height="15" fill="rgb(246,177,23)" fg:x="144" fg:w="1"/><text x="16.9747%" y="1023.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcpy (1 samples, 0.12%)</title><rect x="16.8409%" y="1013" width="0.1161%" height="15" fill="rgb(230,62,27)" fg:x="145" fg:w="1"/><text x="17.0909%" y="1023.50"></text></g><g><title>tc-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.23%)</title><rect x="16.9570%" y="1013" width="0.2323%" height="15" fill="rgb(216,154,8)" fg:x="146" fg:w="2"/><text x="17.2070%" y="1023.50"></text></g><g><title>tc-rust`__rdl_alloc (2 samples, 0.23%)</title><rect x="16.9570%" y="997" width="0.2323%" height="15" fill="rgb(244,35,45)" fg:x="146" fg:w="2"/><text x="17.2070%" y="1007.50"></text></g><g><title>tc-rust`core::str::_&lt;impl str&gt;::trim_matches (1 samples, 0.12%)</title><rect x="17.1893%" y="1013" width="0.1161%" height="15" fill="rgb(251,115,12)" fg:x="148" fg:w="1"/><text x="17.4393%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="17.7700%" y="997" width="0.1161%" height="15" fill="rgb(240,54,50)" fg:x="153" fg:w="1"/><text x="18.0200%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.35%)</title><rect x="17.8862%" y="997" width="0.3484%" height="15" fill="rgb(233,84,52)" fg:x="154" fg:w="3"/><text x="18.1362%" y="1007.50"></text></g><g><title>tc-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="18.2346%" y="997" width="0.1161%" height="15" fill="rgb(207,117,47)" fg:x="157" fg:w="1"/><text x="18.4846%" y="1007.50"></text></g><g><title>tc-rust`alloc::str::_&lt;impl str&gt;::to_lowercase (11 samples, 1.28%)</title><rect x="18.3508%" y="997" width="1.2776%" height="15" fill="rgb(249,43,39)" fg:x="158" fg:w="11"/><text x="18.6008%" y="1007.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (119 samples, 13.82%)</title><rect x="6.2718%" y="1045" width="13.8211%" height="15" fill="rgb(209,38,44)" fg:x="54" fg:w="119"/><text x="6.5218%" y="1055.50">tc-rust`&lt;alloc::vec::..</text></g><g><title>tc-rust`tc_rust::input::Record::node_values (101 samples, 11.73%)</title><rect x="8.3624%" y="1029" width="11.7305%" height="15" fill="rgb(236,212,23)" fg:x="72" fg:w="101"/><text x="8.6124%" y="1039.50">tc-rust`tc_rust::..</text></g><g><title>tc-rust`tc_rust::input::canonicalise (24 samples, 2.79%)</title><rect x="17.3055%" y="1013" width="2.7875%" height="15" fill="rgb(242,79,21)" fg:x="149" fg:w="24"/><text x="17.5555%" y="1023.50">tc..</text></g><g><title>tc-rust`core::unicode::unicode_data::conversions::to_lower (4 samples, 0.46%)</title><rect x="19.6283%" y="997" width="0.4646%" height="15" fill="rgb(211,96,35)" fg:x="169" fg:w="4"/><text x="19.8783%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 1.28%)</title><rect x="20.4413%" y="1029" width="1.2776%" height="15" fill="rgb(253,215,40)" fg:x="176" fg:w="11"/><text x="20.6913%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.12%)</title><rect x="21.7189%" y="1029" width="0.1161%" height="15" fill="rgb(211,81,21)" fg:x="187" fg:w="1"/><text x="21.9689%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.23%)</title><rect x="21.8351%" y="1029" width="0.2323%" height="15" fill="rgb(208,190,38)" fg:x="188" fg:w="2"/><text x="22.0851%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.23%)</title><rect x="21.8351%" y="1013" width="0.2323%" height="15" fill="rgb(235,213,38)" fg:x="188" fg:w="2"/><text x="22.0851%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.23%)</title><rect x="21.8351%" y="997" width="0.2323%" height="15" fill="rgb(237,122,38)" fg:x="188" fg:w="2"/><text x="22.0851%" y="1007.50"></text></g><g><title>tc-rust`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.51%)</title><rect x="22.0674%" y="1029" width="1.5099%" height="15" fill="rgb(244,218,35)" fg:x="190" fg:w="13"/><text x="22.3174%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 1.39%)</title><rect x="22.1835%" y="1013" width="1.3937%" height="15" fill="rgb(240,68,47)" fg:x="191" fg:w="12"/><text x="22.4335%" y="1023.50"></text></g><g><title>tc-rust`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 3.60%)</title><rect x="20.0929%" y="1045" width="3.6005%" height="15" fill="rgb(210,16,53)" fg:x="173" fg:w="31"/><text x="20.3429%" y="1055.50">tc-r..</text></g><g><title>tc-rust`__rdl_dealloc (1 samples, 0.12%)</title><rect x="23.5772%" y="1029" width="0.1161%" height="15" fill="rgb(235,124,12)" fg:x="203" fg:w="1"/><text x="23.8272%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.12%)</title><rect x="23.6934%" y="1029" width="0.1161%" height="15" fill="rgb(224,169,11)" fg:x="204" fg:w="1"/><text x="23.9434%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.81%)</title><rect x="23.8095%" y="1029" width="0.8130%" height="15" fill="rgb(250,166,2)" fg:x="205" fg:w="7"/><text x="24.0595%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.35%)</title><rect x="24.6225%" y="1029" width="0.3484%" height="15" fill="rgb(242,216,29)" fg:x="212" fg:w="3"/><text x="24.8725%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.46%)</title><rect x="24.9710%" y="1029" width="0.4646%" height="15" fill="rgb(230,116,27)" fg:x="215" fg:w="4"/><text x="25.2210%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.70%)</title><rect x="25.4355%" y="1029" width="0.6969%" height="15" fill="rgb(228,99,48)" fg:x="219" fg:w="6"/><text x="25.6855%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.23%)</title><rect x="26.1324%" y="1029" width="0.2323%" height="15" fill="rgb(253,11,6)" fg:x="225" fg:w="2"/><text x="26.3824%" y="1039.50"></text></g><g><title>tc-rust`DYLD-STUB$$free (1 samples, 0.12%)</title><rect x="26.3647%" y="1029" width="0.1161%" height="15" fill="rgb(247,143,39)" fg:x="227" fg:w="1"/><text x="26.6147%" y="1039.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcpy (1 samples, 0.12%)</title><rect x="26.4808%" y="1029" width="0.1161%" height="15" fill="rgb(236,97,10)" fg:x="228" fg:w="1"/><text x="26.7308%" y="1039.50"></text></g><g><title>tc-rust`__rust_dealloc (1 samples, 0.12%)</title><rect x="26.5970%" y="1029" width="0.1161%" height="15" fill="rgb(233,208,19)" fg:x="229" fg:w="1"/><text x="26.8470%" y="1039.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.23%)</title><rect x="26.7131%" y="1029" width="0.2323%" height="15" fill="rgb(216,164,2)" fg:x="230" fg:w="2"/><text x="26.9631%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.35%)</title><rect x="28.2230%" y="1013" width="0.3484%" height="15" fill="rgb(220,129,5)" fg:x="243" fg:w="3"/><text x="28.4730%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 1.51%)</title><rect x="28.5714%" y="1013" width="1.5099%" height="15" fill="rgb(242,17,10)" fg:x="246" fg:w="13"/><text x="28.8214%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.58%)</title><rect x="30.0813%" y="1013" width="0.5807%" height="15" fill="rgb(242,107,0)" fg:x="259" fg:w="5"/><text x="30.3313%" y="1023.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.12%)</title><rect x="30.6620%" y="1013" width="0.1161%" height="15" fill="rgb(251,28,31)" fg:x="264" fg:w="1"/><text x="30.9120%" y="1023.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.58%)</title><rect x="30.7782%" y="1013" width="0.5807%" height="15" fill="rgb(233,223,10)" fg:x="265" fg:w="5"/><text x="31.0282%" y="1023.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="31.3589%" y="1013" width="0.3484%" height="15" fill="rgb(215,21,27)" fg:x="270" fg:w="3"/><text x="31.6089%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.12%)</title><rect x="31.5912%" y="997" width="0.1161%" height="15" fill="rgb(232,23,21)" fg:x="272" fg:w="1"/><text x="31.8412%" y="1007.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.23%)</title><rect x="31.7073%" y="1013" width="0.2323%" height="15" fill="rgb(244,5,23)" fg:x="273" fg:w="2"/><text x="31.9573%" y="1023.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 1.86%)</title><rect x="31.9396%" y="1013" width="1.8583%" height="15" fill="rgb(226,81,46)" fg:x="275" fg:w="16"/><text x="32.1896%" y="1023.50">t..</text></g><g><title>tc-rust`DYLD-STUB$$malloc (1 samples, 0.12%)</title><rect x="33.7979%" y="1013" width="0.1161%" height="15" fill="rgb(247,70,30)" fg:x="291" fg:w="1"/><text x="34.0479%" y="1023.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcpy (1 samples, 0.12%)</title><rect x="33.9141%" y="1013" width="0.1161%" height="15" fill="rgb(212,68,19)" fg:x="292" fg:w="1"/><text x="34.1641%" y="1023.50"></text></g><g><title>tc-rust`__rdl_alloc (1 samples, 0.12%)</title><rect x="34.0302%" y="1013" width="0.1161%" height="15" fill="rgb(240,187,13)" fg:x="293" fg:w="1"/><text x="34.2802%" y="1023.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (9 samples, 1.05%)</title><rect x="34.1463%" y="1013" width="1.0453%" height="15" fill="rgb(223,113,26)" fg:x="294" fg:w="9"/><text x="34.3963%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.35%)</title><rect x="36.2369%" y="997" width="0.3484%" height="15" fill="rgb(206,192,2)" fg:x="312" fg:w="3"/><text x="36.4869%" y="1007.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 1.63%)</title><rect x="36.5854%" y="997" width="1.6260%" height="15" fill="rgb(241,108,4)" fg:x="315" fg:w="14"/><text x="36.8354%" y="1007.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63 samples, 7.32%)</title><rect x="35.1916%" y="1013" width="7.3171%" height="15" fill="rgb(247,173,49)" fg:x="303" fg:w="63"/><text x="35.4416%" y="1023.50">tc-rust`ha..</text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (37 samples, 4.30%)</title><rect x="38.2114%" y="997" width="4.2973%" height="15" fill="rgb(224,114,35)" fg:x="329" fg:w="37"/><text x="38.4614%" y="1007.50">tc-ru..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="43.0894%" y="997" width="0.2323%" height="15" fill="rgb(245,159,27)" fg:x="371" fg:w="2"/><text x="43.3394%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.46%)</title><rect x="43.3217%" y="997" width="0.4646%" height="15" fill="rgb(245,172,44)" fg:x="373" fg:w="4"/><text x="43.5717%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.12%)</title><rect x="43.7863%" y="997" width="0.1161%" height="15" fill="rgb(236,23,11)" fg:x="377" fg:w="1"/><text x="44.0363%" y="1007.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.23%)</title><rect x="43.9024%" y="997" width="0.2323%" height="15" fill="rgb(205,117,38)" fg:x="378" fg:w="2"/><text x="44.1524%" y="1007.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.23%)</title><rect x="44.1347%" y="997" width="0.2323%" height="15" fill="rgb(237,72,25)" fg:x="380" fg:w="2"/><text x="44.3847%" y="1007.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (2 samples, 0.23%)</title><rect x="44.3670%" y="997" width="0.2323%" height="15" fill="rgb(244,70,9)" fg:x="382" fg:w="2"/><text x="44.6170%" y="1007.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.58%)</title><rect x="44.5993%" y="997" width="0.5807%" height="15" fill="rgb(217,125,39)" fg:x="384" fg:w="5"/><text x="44.8493%" y="1007.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (4 samples, 0.46%)</title><rect x="44.7154%" y="981" width="0.4646%" height="15" fill="rgb(235,36,10)" fg:x="385" fg:w="4"/><text x="44.9654%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.12%)</title><rect x="45.1800%" y="981" width="0.1161%" height="15" fill="rgb(251,123,47)" fg:x="389" fg:w="1"/><text x="45.4300%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="45.2962%" y="981" width="0.1161%" height="15" fill="rgb(221,13,13)" fg:x="390" fg:w="1"/><text x="45.5462%" y="991.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.35%)</title><rect x="45.4123%" y="981" width="0.3484%" height="15" fill="rgb(238,131,9)" fg:x="391" fg:w="3"/><text x="45.6623%" y="991.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (2 samples, 0.23%)</title><rect x="45.5285%" y="965" width="0.2323%" height="15" fill="rgb(211,50,8)" fg:x="392" fg:w="2"/><text x="45.7785%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="45.7607%" y="965" width="0.1161%" height="15" fill="rgb(245,182,24)" fg:x="394" fg:w="1"/><text x="46.0107%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.12%)</title><rect x="45.8769%" y="965" width="0.1161%" height="15" fill="rgb(242,14,37)" fg:x="395" fg:w="1"/><text x="46.1269%" y="975.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="46.1092%" y="917" width="0.1161%" height="15" fill="rgb(246,228,12)" fg:x="397" fg:w="1"/><text x="46.3592%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.12%)</title><rect x="46.1092%" y="901" width="0.1161%" height="15" fill="rgb(213,55,15)" fg:x="397" fg:w="1"/><text x="46.3592%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.12%)</title><rect x="46.1092%" y="885" width="0.1161%" height="15" fill="rgb(209,9,3)" fg:x="397" fg:w="1"/><text x="46.3592%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.12%)</title><rect x="46.3415%" y="853" width="0.1161%" height="15" fill="rgb(230,59,30)" fg:x="399" fg:w="1"/><text x="46.5915%" y="863.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="46.4576%" y="725" width="0.1161%" height="15" fill="rgb(209,121,21)" fg:x="400" fg:w="1"/><text x="46.7076%" y="735.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.12%)</title><rect x="46.5738%" y="629" width="0.1161%" height="15" fill="rgb(220,109,13)" fg:x="401" fg:w="1"/><text x="46.8238%" y="639.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.12%)</title><rect x="46.6899%" y="469" width="0.1161%" height="15" fill="rgb(232,18,1)" fg:x="402" fg:w="1"/><text x="46.9399%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.12%)</title><rect x="46.8060%" y="421" width="0.1161%" height="15" fill="rgb(215,41,42)" fg:x="403" fg:w="1"/><text x="47.0560%" y="431.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.12%)</title><rect x="46.9222%" y="181" width="0.1161%" height="15" fill="rgb(224,123,36)" fg:x="404" fg:w="1"/><text x="47.1722%" y="191.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="46.9222%" y="165" width="0.1161%" height="15" fill="rgb(240,125,3)" fg:x="404" fg:w="1"/><text x="47.1722%" y="175.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.12%)</title><rect x="47.0383%" y="85" width="0.1161%" height="15" fill="rgb(205,98,50)" fg:x="405" fg:w="1"/><text x="47.2883%" y="95.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="47.0383%" y="69" width="0.1161%" height="15" fill="rgb(205,185,37)" fg:x="405" fg:w="1"/><text x="47.2883%" y="79.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (5 samples, 0.58%)</title><rect x="46.6899%" y="565" width="0.5807%" height="15" fill="rgb(238,207,15)" fg:x="402" fg:w="5"/><text x="46.9399%" y="575.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (5 samples, 0.58%)</title><rect x="46.6899%" y="549" width="0.5807%" height="15" fill="rgb(213,199,42)" fg:x="402" fg:w="5"/><text x="46.9399%" y="559.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (5 samples, 0.58%)</title><rect x="46.6899%" y="533" width="0.5807%" height="15" fill="rgb(235,201,11)" fg:x="402" fg:w="5"/><text x="46.9399%" y="543.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (5 samples, 0.58%)</title><rect x="46.6899%" y="517" width="0.5807%" height="15" fill="rgb(207,46,11)" fg:x="402" fg:w="5"/><text x="46.9399%" y="527.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (5 samples, 0.58%)</title><rect x="46.6899%" y="501" width="0.5807%" height="15" fill="rgb(241,35,35)" fg:x="402" fg:w="5"/><text x="46.9399%" y="511.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (5 samples, 0.58%)</title><rect x="46.6899%" y="485" width="0.5807%" height="15" fill="rgb(243,32,47)" fg:x="402" fg:w="5"/><text x="46.9399%" y="495.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (4 samples, 0.46%)</title><rect x="46.8060%" y="469" width="0.4646%" height="15" fill="rgb(247,202,23)" fg:x="403" fg:w="4"/><text x="47.0560%" y="479.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (4 samples, 0.46%)</title><rect x="46.8060%" y="453" width="0.4646%" height="15" fill="rgb(219,102,11)" fg:x="403" fg:w="4"/><text x="47.0560%" y="463.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (4 samples, 0.46%)</title><rect x="46.8060%" y="437" width="0.4646%" height="15" fill="rgb(243,110,44)" fg:x="403" fg:w="4"/><text x="47.0560%" y="447.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="421" width="0.3484%" height="15" fill="rgb(222,74,54)" fg:x="404" fg:w="3"/><text x="47.1722%" y="431.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="405" width="0.3484%" height="15" fill="rgb(216,99,12)" fg:x="404" fg:w="3"/><text x="47.1722%" y="415.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="389" width="0.3484%" height="15" fill="rgb(226,22,26)" fg:x="404" fg:w="3"/><text x="47.1722%" y="399.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="373" width="0.3484%" height="15" fill="rgb(217,163,10)" fg:x="404" fg:w="3"/><text x="47.1722%" y="383.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="357" width="0.3484%" height="15" fill="rgb(213,25,53)" fg:x="404" fg:w="3"/><text x="47.1722%" y="367.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="341" width="0.3484%" height="15" fill="rgb(252,105,26)" fg:x="404" fg:w="3"/><text x="47.1722%" y="351.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="325" width="0.3484%" height="15" fill="rgb(220,39,43)" fg:x="404" fg:w="3"/><text x="47.1722%" y="335.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="309" width="0.3484%" height="15" fill="rgb(229,68,48)" fg:x="404" fg:w="3"/><text x="47.1722%" y="319.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="293" width="0.3484%" height="15" fill="rgb(252,8,32)" fg:x="404" fg:w="3"/><text x="47.1722%" y="303.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="277" width="0.3484%" height="15" fill="rgb(223,20,43)" fg:x="404" fg:w="3"/><text x="47.1722%" y="287.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="261" width="0.3484%" height="15" fill="rgb(229,81,49)" fg:x="404" fg:w="3"/><text x="47.1722%" y="271.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="245" width="0.3484%" height="15" fill="rgb(236,28,36)" fg:x="404" fg:w="3"/><text x="47.1722%" y="255.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="229" width="0.3484%" height="15" fill="rgb(249,185,26)" fg:x="404" fg:w="3"/><text x="47.1722%" y="239.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="213" width="0.3484%" height="15" fill="rgb(249,174,33)" fg:x="404" fg:w="3"/><text x="47.1722%" y="223.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (3 samples, 0.35%)</title><rect x="46.9222%" y="197" width="0.3484%" height="15" fill="rgb(233,201,37)" fg:x="404" fg:w="3"/><text x="47.1722%" y="207.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (2 samples, 0.23%)</title><rect x="47.0383%" y="181" width="0.2323%" height="15" fill="rgb(221,78,26)" fg:x="405" fg:w="2"/><text x="47.2883%" y="191.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (2 samples, 0.23%)</title><rect x="47.0383%" y="165" width="0.2323%" height="15" fill="rgb(250,127,30)" fg:x="405" fg:w="2"/><text x="47.2883%" y="175.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (2 samples, 0.23%)</title><rect x="47.0383%" y="149" width="0.2323%" height="15" fill="rgb(230,49,44)" fg:x="405" fg:w="2"/><text x="47.2883%" y="159.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (2 samples, 0.23%)</title><rect x="47.0383%" y="133" width="0.2323%" height="15" fill="rgb(229,67,23)" fg:x="405" fg:w="2"/><text x="47.2883%" y="143.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (2 samples, 0.23%)</title><rect x="47.0383%" y="117" width="0.2323%" height="15" fill="rgb(249,83,47)" fg:x="405" fg:w="2"/><text x="47.2883%" y="127.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (2 samples, 0.23%)</title><rect x="47.0383%" y="101" width="0.2323%" height="15" fill="rgb(215,43,3)" fg:x="405" fg:w="2"/><text x="47.2883%" y="111.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (1 samples, 0.12%)</title><rect x="47.1545%" y="85" width="0.1161%" height="15" fill="rgb(238,154,13)" fg:x="406" fg:w="1"/><text x="47.4045%" y="95.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (1 samples, 0.12%)</title><rect x="47.1545%" y="69" width="0.1161%" height="15" fill="rgb(219,56,2)" fg:x="406" fg:w="1"/><text x="47.4045%" y="79.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (1 samples, 0.12%)</title><rect x="47.1545%" y="53" width="0.1161%" height="15" fill="rgb(233,0,4)" fg:x="406" fg:w="1"/><text x="47.4045%" y="63.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="47.1545%" y="37" width="0.1161%" height="15" fill="rgb(235,30,7)" fg:x="406" fg:w="1"/><text x="47.4045%" y="47.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (11 samples, 1.28%)</title><rect x="46.1092%" y="933" width="1.2776%" height="15" fill="rgb(250,79,13)" fg:x="397" fg:w="11"/><text x="46.3592%" y="943.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (10 samples, 1.16%)</title><rect x="46.2253%" y="917" width="1.1614%" height="15" fill="rgb(211,146,34)" fg:x="398" fg:w="10"/><text x="46.4753%" y="927.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (10 samples, 1.16%)</title><rect x="46.2253%" y="901" width="1.1614%" height="15" fill="rgb(228,22,38)" fg:x="398" fg:w="10"/><text x="46.4753%" y="911.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (10 samples, 1.16%)</title><rect x="46.2253%" y="885" width="1.1614%" height="15" fill="rgb(235,168,5)" fg:x="398" fg:w="10"/><text x="46.4753%" y="895.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (10 samples, 1.16%)</title><rect x="46.2253%" y="869" width="1.1614%" height="15" fill="rgb(221,155,16)" fg:x="398" fg:w="10"/><text x="46.4753%" y="879.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="853" width="0.9292%" height="15" fill="rgb(215,215,53)" fg:x="400" fg:w="8"/><text x="46.7076%" y="863.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="837" width="0.9292%" height="15" fill="rgb(223,4,10)" fg:x="400" fg:w="8"/><text x="46.7076%" y="847.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="821" width="0.9292%" height="15" fill="rgb(234,103,6)" fg:x="400" fg:w="8"/><text x="46.7076%" y="831.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="805" width="0.9292%" height="15" fill="rgb(227,97,0)" fg:x="400" fg:w="8"/><text x="46.7076%" y="815.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="789" width="0.9292%" height="15" fill="rgb(234,150,53)" fg:x="400" fg:w="8"/><text x="46.7076%" y="799.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="773" width="0.9292%" height="15" fill="rgb(228,201,54)" fg:x="400" fg:w="8"/><text x="46.7076%" y="783.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="757" width="0.9292%" height="15" fill="rgb(222,22,37)" fg:x="400" fg:w="8"/><text x="46.7076%" y="767.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (8 samples, 0.93%)</title><rect x="46.4576%" y="741" width="0.9292%" height="15" fill="rgb(237,53,32)" fg:x="400" fg:w="8"/><text x="46.7076%" y="751.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (7 samples, 0.81%)</title><rect x="46.5738%" y="725" width="0.8130%" height="15" fill="rgb(233,25,53)" fg:x="401" fg:w="7"/><text x="46.8238%" y="735.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (7 samples, 0.81%)</title><rect x="46.5738%" y="709" width="0.8130%" height="15" fill="rgb(210,40,34)" fg:x="401" fg:w="7"/><text x="46.8238%" y="719.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (7 samples, 0.81%)</title><rect x="46.5738%" y="693" width="0.8130%" height="15" fill="rgb(241,220,44)" fg:x="401" fg:w="7"/><text x="46.8238%" y="703.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (7 samples, 0.81%)</title><rect x="46.5738%" y="677" width="0.8130%" height="15" fill="rgb(235,28,35)" fg:x="401" fg:w="7"/><text x="46.8238%" y="687.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (7 samples, 0.81%)</title><rect x="46.5738%" y="661" width="0.8130%" height="15" fill="rgb(210,56,17)" fg:x="401" fg:w="7"/><text x="46.8238%" y="671.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (7 samples, 0.81%)</title><rect x="46.5738%" y="645" width="0.8130%" height="15" fill="rgb(224,130,29)" fg:x="401" fg:w="7"/><text x="46.8238%" y="655.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (6 samples, 0.70%)</title><rect x="46.6899%" y="629" width="0.6969%" height="15" fill="rgb(235,212,8)" fg:x="402" fg:w="6"/><text x="46.9399%" y="639.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (6 samples, 0.70%)</title><rect x="46.6899%" y="613" width="0.6969%" height="15" fill="rgb(223,33,50)" fg:x="402" fg:w="6"/><text x="46.9399%" y="623.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (6 samples, 0.70%)</title><rect x="46.6899%" y="597" width="0.6969%" height="15" fill="rgb(219,149,13)" fg:x="402" fg:w="6"/><text x="46.9399%" y="607.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (6 samples, 0.70%)</title><rect x="46.6899%" y="581" width="0.6969%" height="15" fill="rgb(250,156,29)" fg:x="402" fg:w="6"/><text x="46.9399%" y="591.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (1 samples, 0.12%)</title><rect x="47.2706%" y="565" width="0.1161%" height="15" fill="rgb(216,193,19)" fg:x="407" fg:w="1"/><text x="47.5206%" y="575.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (12 samples, 1.39%)</title><rect x="46.1092%" y="949" width="1.3937%" height="15" fill="rgb(216,135,14)" fg:x="397" fg:w="12"/><text x="46.3592%" y="959.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (1 samples, 0.12%)</title><rect x="47.3868%" y="933" width="0.1161%" height="15" fill="rgb(241,47,5)" fg:x="408" fg:w="1"/><text x="47.6368%" y="943.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (16 samples, 1.86%)</title><rect x="45.7607%" y="981" width="1.8583%" height="15" fill="rgb(233,42,35)" fg:x="394" fg:w="16"/><text x="46.0107%" y="991.50">t..</text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (14 samples, 1.63%)</title><rect x="45.9930%" y="965" width="1.6260%" height="15" fill="rgb(231,13,6)" fg:x="396" fg:w="14"/><text x="46.2430%" y="975.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (1 samples, 0.12%)</title><rect x="47.5029%" y="949" width="0.1161%" height="15" fill="rgb(207,181,40)" fg:x="409" fg:w="1"/><text x="47.7529%" y="959.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.12%)</title><rect x="47.5029%" y="933" width="0.1161%" height="15" fill="rgb(254,173,49)" fg:x="409" fg:w="1"/><text x="47.7529%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.12%)</title><rect x="47.5029%" y="917" width="0.1161%" height="15" fill="rgb(221,1,38)" fg:x="409" fg:w="1"/><text x="47.7529%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.35%)</title><rect x="47.6190%" y="965" width="0.3484%" height="15" fill="rgb(206,124,46)" fg:x="410" fg:w="3"/><text x="47.8690%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="47.9675%" y="949" width="0.1161%" height="15" fill="rgb(249,21,11)" fg:x="413" fg:w="1"/><text x="48.2175%" y="959.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="47.9675%" y="965" width="0.4646%" height="15" fill="rgb(222,201,40)" fg:x="413" fg:w="4"/><text x="48.2175%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.35%)</title><rect x="48.0836%" y="949" width="0.3484%" height="15" fill="rgb(235,61,29)" fg:x="414" fg:w="3"/><text x="48.3336%" y="959.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (29 samples, 3.37%)</title><rect x="45.1800%" y="997" width="3.3682%" height="15" fill="rgb(219,207,3)" fg:x="389" fg:w="29"/><text x="45.4300%" y="1007.50">tc-..</text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (8 samples, 0.93%)</title><rect x="47.6190%" y="981" width="0.9292%" height="15" fill="rgb(222,56,46)" fg:x="410" fg:w="8"/><text x="47.8690%" y="991.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="48.4321%" y="965" width="0.1161%" height="15" fill="rgb(239,76,54)" fg:x="417" fg:w="1"/><text x="48.6821%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="48.5482%" y="981" width="0.1161%" height="15" fill="rgb(231,124,27)" fg:x="418" fg:w="1"/><text x="48.7982%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="48.6643%" y="981" width="0.1161%" height="15" fill="rgb(249,195,6)" fg:x="419" fg:w="1"/><text x="48.9143%" y="991.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="48.7805%" y="981" width="0.1161%" height="15" fill="rgb(237,174,47)" fg:x="420" fg:w="1"/><text x="49.0305%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.93%)</title><rect x="48.8966%" y="965" width="0.9292%" height="15" fill="rgb(206,201,31)" fg:x="421" fg:w="8"/><text x="49.1466%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.58%)</title><rect x="49.8258%" y="965" width="0.5807%" height="15" fill="rgb(231,57,52)" fg:x="429" fg:w="5"/><text x="50.0758%" y="975.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.63%)</title><rect x="48.8966%" y="981" width="1.6260%" height="15" fill="rgb(248,177,22)" fg:x="421" fg:w="14"/><text x="49.1466%" y="991.50"></text></g><g><title>tc-rust`DYLD-STUB$$malloc (1 samples, 0.12%)</title><rect x="50.4065%" y="965" width="0.1161%" height="15" fill="rgb(215,211,37)" fg:x="434" fg:w="1"/><text x="50.6565%" y="975.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.46%)</title><rect x="50.5226%" y="981" width="0.4646%" height="15" fill="rgb(241,128,51)" fg:x="435" fg:w="4"/><text x="50.7726%" y="991.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (74 samples, 8.59%)</title><rect x="42.5087%" y="1013" width="8.5947%" height="15" fill="rgb(227,165,31)" fg:x="366" fg:w="74"/><text x="42.7587%" y="1023.50">tc-rust`tc_r..</text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (22 samples, 2.56%)</title><rect x="48.5482%" y="997" width="2.5552%" height="15" fill="rgb(228,167,24)" fg:x="418" fg:w="22"/><text x="48.7982%" y="1007.50">tc..</text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (1 samples, 0.12%)</title><rect x="50.9872%" y="981" width="0.1161%" height="15" fill="rgb(228,143,12)" fg:x="439" fg:w="1"/><text x="51.2372%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="51.4518%" y="997" width="0.1161%" height="15" fill="rgb(249,149,8)" fg:x="443" fg:w="1"/><text x="51.7018%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="52.2648%" y="981" width="0.1161%" height="15" fill="rgb(243,35,44)" fg:x="450" fg:w="1"/><text x="52.5148%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.81%)</title><rect x="52.3810%" y="981" width="0.8130%" height="15" fill="rgb(246,89,9)" fg:x="451" fg:w="7"/><text x="52.6310%" y="991.50"></text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 2.67%)</title><rect x="51.5679%" y="997" width="2.6713%" height="15" fill="rgb(233,213,13)" fg:x="444" fg:w="23"/><text x="51.8179%" y="1007.50">tc..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 1.05%)</title><rect x="53.1940%" y="981" width="1.0453%" height="15" fill="rgb(233,141,41)" fg:x="458" fg:w="9"/><text x="53.4440%" y="991.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.35%)</title><rect x="54.2393%" y="997" width="0.3484%" height="15" fill="rgb(239,167,4)" fg:x="467" fg:w="3"/><text x="54.4893%" y="1007.50"></text></g><g><title>tc-rust`DYLD-STUB$$malloc (1 samples, 0.12%)</title><rect x="54.5877%" y="997" width="0.1161%" height="15" fill="rgb(209,217,16)" fg:x="470" fg:w="1"/><text x="54.8377%" y="1007.50"></text></g><g><title>tc-rust`&lt;tc_rust::graph2::graph::Graph as tc_rust::graph2::bridge_finder::BridgeFinder&gt;::find_bridges (268 samples, 31.13%)</title><rect x="23.6934%" y="1045" width="31.1266%" height="15" fill="rgb(219,88,35)" fg:x="204" fg:w="268"/><text x="23.9434%" y="1055.50">tc-rust`&lt;tc_rust::graph2::graph::Graph as tc_rust:..</text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (240 samples, 27.87%)</title><rect x="26.9454%" y="1029" width="27.8746%" height="15" fill="rgb(220,193,23)" fg:x="232" fg:w="240"/><text x="27.1954%" y="1039.50">tc-rust`tc_rust::graph2::bridge_finder::Bridg..</text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (32 samples, 3.72%)</title><rect x="51.1034%" y="1013" width="3.7166%" height="15" fill="rgb(230,90,52)" fg:x="440" fg:w="32"/><text x="51.3534%" y="1023.50">tc-r..</text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (1 samples, 0.12%)</title><rect x="54.7038%" y="997" width="0.1161%" height="15" fill="rgb(252,106,19)" fg:x="471" fg:w="1"/><text x="54.9538%" y="1007.50"></text></g><g><title>tc-rust`&lt;tc_rust::graph2::graph::Graph as tc_rust::graph2::union_find::UnionFind&lt;tc_rust::graph2::node::Node&gt;&gt;::find (2 samples, 0.23%)</title><rect x="54.8200%" y="1045" width="0.2323%" height="15" fill="rgb(206,74,20)" fg:x="472" fg:w="2"/><text x="55.0700%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="55.5168%" y="1029" width="0.1161%" height="15" fill="rgb(230,138,44)" fg:x="478" fg:w="1"/><text x="55.7668%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.35%)</title><rect x="55.6330%" y="1029" width="0.3484%" height="15" fill="rgb(235,182,43)" fg:x="479" fg:w="3"/><text x="55.8830%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.12%)</title><rect x="55.9814%" y="1029" width="0.1161%" height="15" fill="rgb(242,16,51)" fg:x="482" fg:w="1"/><text x="56.2314%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.23%)</title><rect x="56.0976%" y="1029" width="0.2323%" height="15" fill="rgb(248,9,4)" fg:x="483" fg:w="2"/><text x="56.3476%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.58%)</title><rect x="56.3298%" y="1029" width="0.5807%" height="15" fill="rgb(210,31,22)" fg:x="485" fg:w="5"/><text x="56.5798%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.35%)</title><rect x="56.9106%" y="1029" width="0.3484%" height="15" fill="rgb(239,54,39)" fg:x="490" fg:w="3"/><text x="57.1606%" y="1039.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.70%)</title><rect x="57.2590%" y="1029" width="0.6969%" height="15" fill="rgb(230,99,41)" fg:x="493" fg:w="6"/><text x="57.5090%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.12%)</title><rect x="57.8397%" y="1013" width="0.1161%" height="15" fill="rgb(253,106,12)" fg:x="498" fg:w="1"/><text x="58.0897%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.12%)</title><rect x="57.8397%" y="997" width="0.1161%" height="15" fill="rgb(213,46,41)" fg:x="498" fg:w="1"/><text x="58.0897%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.46%)</title><rect x="60.1626%" y="1013" width="0.4646%" height="15" fill="rgb(215,133,35)" fg:x="518" fg:w="4"/><text x="60.4126%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 2.79%)</title><rect x="60.6272%" y="1013" width="2.7875%" height="15" fill="rgb(213,28,5)" fg:x="522" fg:w="24"/><text x="60.8772%" y="1023.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 2.09%)</title><rect x="63.4146%" y="1013" width="2.0906%" height="15" fill="rgb(215,77,49)" fg:x="546" fg:w="18"/><text x="63.6646%" y="1023.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 1.63%)</title><rect x="65.5052%" y="1013" width="1.6260%" height="15" fill="rgb(248,100,22)" fg:x="564" fg:w="14"/><text x="65.7552%" y="1023.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 1.63%)</title><rect x="67.1312%" y="1013" width="1.6260%" height="15" fill="rgb(208,67,9)" fg:x="578" fg:w="14"/><text x="67.3812%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (13 samples, 1.51%)</title><rect x="67.2474%" y="997" width="1.5099%" height="15" fill="rgb(219,133,21)" fg:x="579" fg:w="13"/><text x="67.4974%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 1.39%)</title><rect x="67.3635%" y="981" width="1.3937%" height="15" fill="rgb(246,46,29)" fg:x="580" fg:w="12"/><text x="67.6135%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.35%)</title><rect x="68.4088%" y="965" width="0.3484%" height="15" fill="rgb(246,185,52)" fg:x="589" fg:w="3"/><text x="68.6588%" y="975.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.93%)</title><rect x="68.7573%" y="1013" width="0.9292%" height="15" fill="rgb(252,136,11)" fg:x="592" fg:w="8"/><text x="69.0073%" y="1023.50"></text></g><g><title>tc-rust`DYLD-STUB$$malloc (3 samples, 0.35%)</title><rect x="69.6864%" y="1013" width="0.3484%" height="15" fill="rgb(219,138,53)" fg:x="600" fg:w="3"/><text x="69.9364%" y="1023.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcpy (1 samples, 0.12%)</title><rect x="70.0348%" y="1013" width="0.1161%" height="15" fill="rgb(211,51,23)" fg:x="603" fg:w="1"/><text x="70.2848%" y="1023.50"></text></g><g><title>tc-rust`__rdl_alloc (2 samples, 0.23%)</title><rect x="70.1510%" y="1013" width="0.2323%" height="15" fill="rgb(247,221,28)" fg:x="604" fg:w="2"/><text x="70.4010%" y="1023.50"></text></g><g><title>tc-rust`&lt;tc_rust::graph2::graph::Graph as tc_rust::graph2::union_find::UnionFind&lt;tc_rust::graph2::node::Node&gt;&gt;::find (117 samples, 13.59%)</title><rect x="57.9559%" y="1029" width="13.5889%" height="15" fill="rgb(251,222,45)" fg:x="499" fg:w="117"/><text x="58.2059%" y="1039.50">tc-rust`&lt;tc_rust::gra..</text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (10 samples, 1.16%)</title><rect x="70.3833%" y="1013" width="1.1614%" height="15" fill="rgb(217,162,53)" fg:x="606" fg:w="10"/><text x="70.6333%" y="1023.50"></text></g><g><title>tc-rust`DYLD-STUB$$memcmp (2 samples, 0.23%)</title><rect x="71.5447%" y="1029" width="0.2323%" height="15" fill="rgb(229,93,14)" fg:x="616" fg:w="2"/><text x="71.7947%" y="1039.50"></text></g><g><title>tc-rust`__rdl_alloc (1 samples, 0.12%)</title><rect x="71.7770%" y="1029" width="0.1161%" height="15" fill="rgb(209,67,49)" fg:x="618" fg:w="1"/><text x="72.0270%" y="1039.50"></text></g><g><title>tc-rust`__rust_alloc (2 samples, 0.23%)</title><rect x="71.8931%" y="1029" width="0.2323%" height="15" fill="rgb(213,87,29)" fg:x="619" fg:w="2"/><text x="72.1431%" y="1039.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (2 samples, 0.23%)</title><rect x="72.1254%" y="1029" width="0.2323%" height="15" fill="rgb(205,151,52)" fg:x="621" fg:w="2"/><text x="72.3754%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="72.4739%" y="1013" width="0.1161%" height="15" fill="rgb(253,215,39)" fg:x="624" fg:w="1"/><text x="72.7239%" y="1023.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.35%)</title><rect x="72.5900%" y="1013" width="0.3484%" height="15" fill="rgb(221,220,41)" fg:x="625" fg:w="3"/><text x="72.8400%" y="1023.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (5 samples, 0.58%)</title><rect x="72.9384%" y="1013" width="0.5807%" height="15" fill="rgb(218,133,21)" fg:x="628" fg:w="5"/><text x="73.1884%" y="1023.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="73.8676%" y="997" width="0.1161%" height="15" fill="rgb(221,193,43)" fg:x="636" fg:w="1"/><text x="74.1176%" y="1007.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 1.97%)</title><rect x="72.3577%" y="1029" width="1.9744%" height="15" fill="rgb(240,128,52)" fg:x="623" fg:w="17"/><text x="72.6077%" y="1039.50">t..</text></g><g><title>tc-rust`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.81%)</title><rect x="73.5192%" y="1013" width="0.8130%" height="15" fill="rgb(253,114,12)" fg:x="633" fg:w="7"/><text x="73.7692%" y="1023.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (3 samples, 0.35%)</title><rect x="73.9837%" y="997" width="0.3484%" height="15" fill="rgb(215,223,47)" fg:x="637" fg:w="3"/><text x="74.2337%" y="1007.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.23%)</title><rect x="74.7967%" y="1013" width="0.2323%" height="15" fill="rgb(248,225,23)" fg:x="644" fg:w="2"/><text x="75.0467%" y="1023.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (1 samples, 0.12%)</title><rect x="75.0290%" y="1013" width="0.1161%" height="15" fill="rgb(250,108,0)" fg:x="646" fg:w="1"/><text x="75.2790%" y="1023.50"></text></g><g><title>tc-rust`&lt;tc_rust::graph2::graph::Graph as tc_rust::graph2::union_find::UnionFind&lt;tc_rust::graph2::node::Node&gt;&gt;::union (174 samples, 20.21%)</title><rect x="55.0523%" y="1045" width="20.2091%" height="15" fill="rgb(228,208,7)" fg:x="474" fg:w="174"/><text x="55.3023%" y="1055.50">tc-rust`&lt;tc_rust::graph2::graph:..</text></g><g><title>tc-rust`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.93%)</title><rect x="74.3322%" y="1029" width="0.9292%" height="15" fill="rgb(244,45,10)" fg:x="640" fg:w="8"/><text x="74.5822%" y="1039.50"></text></g><g><title>tc-rust`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.12%)</title><rect x="75.1452%" y="1013" width="0.1161%" height="15" fill="rgb(207,125,25)" fg:x="647" fg:w="1"/><text x="75.3952%" y="1023.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="75.1452%" y="997" width="0.1161%" height="15" fill="rgb(210,195,18)" fg:x="647" fg:w="1"/><text x="75.3952%" y="1007.50"></text></g><g><title>tc-rust`DYLD-STUB$$free (2 samples, 0.23%)</title><rect x="75.2613%" y="1045" width="0.2323%" height="15" fill="rgb(249,80,12)" fg:x="648" fg:w="2"/><text x="75.5113%" y="1055.50"></text></g><g><title>tc-rust`__rdl_dealloc (2 samples, 0.23%)</title><rect x="75.4936%" y="1045" width="0.2323%" height="15" fill="rgb(221,65,9)" fg:x="650" fg:w="2"/><text x="75.7436%" y="1055.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (1 samples, 0.12%)</title><rect x="75.7259%" y="1045" width="0.1161%" height="15" fill="rgb(235,49,36)" fg:x="652" fg:w="1"/><text x="75.9759%" y="1055.50"></text></g><g><title>tc-rust`core::ptr::drop_in_place&lt;tc_rust::input::Record&gt; (3 samples, 0.35%)</title><rect x="75.8420%" y="1045" width="0.3484%" height="15" fill="rgb(225,32,20)" fg:x="653" fg:w="3"/><text x="76.0920%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="75.9582%" y="1029" width="0.2323%" height="15" fill="rgb(215,141,46)" fg:x="654" fg:w="2"/><text x="76.2082%" y="1039.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.23%)</title><rect x="76.1905%" y="1045" width="0.2323%" height="15" fill="rgb(250,160,47)" fg:x="656" fg:w="2"/><text x="76.4405%" y="1055.50"></text></g><g><title>tc-rust`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.12%)</title><rect x="76.4228%" y="1045" width="0.1161%" height="15" fill="rgb(216,222,40)" fg:x="658" fg:w="1"/><text x="76.6728%" y="1055.50"></text></g><g><title>tc-rust`tc_rust::graph2::bridge_finder::BridgeFinder::dfs (1 samples, 0.12%)</title><rect x="76.5389%" y="1045" width="0.1161%" height="15" fill="rgb(234,217,39)" fg:x="659" fg:w="1"/><text x="76.7889%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.70%)</title><rect x="80.3717%" y="1029" width="0.6969%" height="15" fill="rgb(207,178,40)" fg:x="692" fg:w="6"/><text x="80.6217%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.70%)</title><rect x="81.0685%" y="1029" width="0.6969%" height="15" fill="rgb(221,136,13)" fg:x="698" fg:w="6"/><text x="81.3185%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.81%)</title><rect x="81.7654%" y="1029" width="0.8130%" height="15" fill="rgb(249,199,10)" fg:x="704" fg:w="7"/><text x="82.0154%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 1.28%)</title><rect x="82.5784%" y="1029" width="1.2776%" height="15" fill="rgb(249,222,13)" fg:x="711" fg:w="11"/><text x="82.8284%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="83.8560%" y="1029" width="0.1161%" height="15" fill="rgb(244,185,38)" fg:x="722" fg:w="1"/><text x="84.1060%" y="1039.50"></text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.70%)</title><rect x="83.9721%" y="1029" width="0.6969%" height="15" fill="rgb(236,202,9)" fg:x="723" fg:w="6"/><text x="84.2221%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.46%)</title><rect x="84.2044%" y="1013" width="0.4646%" height="15" fill="rgb(250,229,37)" fg:x="725" fg:w="4"/><text x="84.4544%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.46%)</title><rect x="84.2044%" y="997" width="0.4646%" height="15" fill="rgb(206,174,23)" fg:x="725" fg:w="4"/><text x="84.4544%" y="1007.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.81%)</title><rect x="84.6690%" y="1029" width="0.8130%" height="15" fill="rgb(211,33,43)" fg:x="729" fg:w="7"/><text x="84.9190%" y="1039.50"></text></g><g><title>tc-rust`DYLD-STUB$$malloc (3 samples, 0.35%)</title><rect x="85.4820%" y="1029" width="0.3484%" height="15" fill="rgb(245,58,50)" fg:x="736" fg:w="3"/><text x="85.7320%" y="1039.50"></text></g><g><title>tc-rust`__rdl_alloc (4 samples, 0.46%)</title><rect x="85.8304%" y="1029" width="0.4646%" height="15" fill="rgb(244,68,36)" fg:x="739" fg:w="4"/><text x="86.0804%" y="1039.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (10 samples, 1.16%)</title><rect x="86.2950%" y="1029" width="1.1614%" height="15" fill="rgb(232,229,15)" fg:x="743" fg:w="10"/><text x="86.5450%" y="1039.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.35%)</title><rect x="88.3856%" y="1013" width="0.3484%" height="15" fill="rgb(254,30,23)" fg:x="761" fg:w="3"/><text x="88.6356%" y="1023.50"></text></g><g><title>tc-rust`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 1.39%)</title><rect x="87.4564%" y="1029" width="1.3937%" height="15" fill="rgb(235,160,14)" fg:x="753" fg:w="12"/><text x="87.7064%" y="1039.50"></text></g><g><title>tc-rust`core::hash::BuildHasher::hash_one (1 samples, 0.12%)</title><rect x="88.7340%" y="1013" width="0.1161%" height="15" fill="rgb(212,155,44)" fg:x="764" fg:w="1"/><text x="88.9840%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.12%)</title><rect x="89.0825%" y="1013" width="0.1161%" height="15" fill="rgb(226,2,50)" fg:x="767" fg:w="1"/><text x="89.3325%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.12%)</title><rect x="89.0825%" y="997" width="0.1161%" height="15" fill="rgb(234,177,6)" fg:x="767" fg:w="1"/><text x="89.3325%" y="1007.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::add_connected_component (109 samples, 12.66%)</title><rect x="76.6551%" y="1045" width="12.6597%" height="15" fill="rgb(217,24,9)" fg:x="660" fg:w="109"/><text x="76.9051%" y="1055.50">tc-rust`tc_rust::gr..</text></g><g><title>tc-rust`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.46%)</title><rect x="88.8502%" y="1029" width="0.4646%" height="15" fill="rgb(220,13,46)" fg:x="765" fg:w="4"/><text x="89.1002%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.12%)</title><rect x="89.1986%" y="1013" width="0.1161%" height="15" fill="rgb(239,221,27)" fg:x="768" fg:w="1"/><text x="89.4486%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.12%)</title><rect x="89.1986%" y="997" width="0.1161%" height="15" fill="rgb(222,198,25)" fg:x="768" fg:w="1"/><text x="89.4486%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.12%)</title><rect x="89.1986%" y="981" width="0.1161%" height="15" fill="rgb(211,99,13)" fg:x="768" fg:w="1"/><text x="89.4486%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="89.4309%" y="1029" width="0.1161%" height="15" fill="rgb(232,111,31)" fg:x="770" fg:w="1"/><text x="89.6809%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.23%)</title><rect x="89.5470%" y="1029" width="0.2323%" height="15" fill="rgb(245,82,37)" fg:x="771" fg:w="2"/><text x="89.7970%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.58%)</title><rect x="89.7793%" y="1013" width="0.5807%" height="15" fill="rgb(227,149,46)" fg:x="773" fg:w="5"/><text x="90.0293%" y="1023.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 2.32%)</title><rect x="90.3600%" y="1013" width="2.3229%" height="15" fill="rgb(218,36,50)" fg:x="778" fg:w="20"/><text x="90.6100%" y="1023.50">l..</text></g><g><title>tc-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 3.02%)</title><rect x="89.7793%" y="1029" width="3.0197%" height="15" fill="rgb(226,80,48)" fg:x="773" fg:w="26"/><text x="90.0293%" y="1039.50">tc-..</text></g><g><title>tc-rust`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="92.6829%" y="1013" width="0.1161%" height="15" fill="rgb(238,224,15)" fg:x="798" fg:w="1"/><text x="92.9329%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.12%)</title><rect x="92.6829%" y="997" width="0.1161%" height="15" fill="rgb(241,136,10)" fg:x="798" fg:w="1"/><text x="92.9329%" y="1007.50"></text></g><g><title>tc-rust`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.12%)</title><rect x="92.7991%" y="1029" width="0.1161%" height="15" fill="rgb(208,32,45)" fg:x="799" fg:w="1"/><text x="93.0491%" y="1039.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::adjacent_nodes (32 samples, 3.72%)</title><rect x="89.3148%" y="1045" width="3.7166%" height="15" fill="rgb(207,135,9)" fg:x="769" fg:w="32"/><text x="89.5648%" y="1055.50">tc-r..</text></g><g><title>tc-rust`__rdl_alloc (1 samples, 0.12%)</title><rect x="92.9152%" y="1029" width="0.1161%" height="15" fill="rgb(206,86,44)" fg:x="800" fg:w="1"/><text x="93.1652%" y="1039.50"></text></g><g><title>tc-rust`tc_rust::graph2::graph::Graph::new (1 samples, 0.12%)</title><rect x="93.0314%" y="1045" width="0.1161%" height="15" fill="rgb(245,177,15)" fg:x="801" fg:w="1"/><text x="93.2814%" y="1055.50"></text></g><g><title>tc-rust`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.12%)</title><rect x="93.0314%" y="1029" width="0.1161%" height="15" fill="rgb(206,64,50)" fg:x="801" fg:w="1"/><text x="93.2814%" y="1039.50"></text></g><g><title>tc-rust`std::sys::unix::rand::hashmap_random_keys (1 samples, 0.12%)</title><rect x="93.0314%" y="1013" width="0.1161%" height="15" fill="rgb(234,36,40)" fg:x="801" fg:w="1"/><text x="93.2814%" y="1023.50"></text></g><g><title>tc-rust`std::sys::unix::rand::imp::fill_bytes (1 samples, 0.12%)</title><rect x="93.0314%" y="997" width="0.1161%" height="15" fill="rgb(213,64,8)" fg:x="801" fg:w="1"/><text x="93.2814%" y="1007.50"></text></g><g><title>dyld`dyld4::APIs::dlsym (1 samples, 0.12%)</title><rect x="93.0314%" y="981" width="0.1161%" height="15" fill="rgb(210,75,36)" fg:x="801" fg:w="1"/><text x="93.2814%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.23%)</title><rect x="93.7282%" y="1013" width="0.2323%" height="15" fill="rgb(229,88,21)" fg:x="807" fg:w="2"/><text x="93.9782%" y="1023.50"></text></g><g><title>tc-rust`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.12%)</title><rect x="93.9605%" y="1013" width="0.1161%" height="15" fill="rgb(252,204,47)" fg:x="809" fg:w="1"/><text x="94.2105%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="94.6574%" y="981" width="0.1161%" height="15" fill="rgb(208,77,27)" fg:x="815" fg:w="1"/><text x="94.9074%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.23%)</title><rect x="94.7735%" y="981" width="0.2323%" height="15" fill="rgb(221,76,26)" fg:x="816" fg:w="2"/><text x="95.0235%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.70%)</title><rect x="95.0058%" y="981" width="0.6969%" height="15" fill="rgb(225,139,18)" fg:x="818" fg:w="6"/><text x="95.2558%" y="991.50"></text></g><g><title>tc-rust`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_string (4 samples, 0.46%)</title><rect x="95.7027%" y="981" width="0.4646%" height="15" fill="rgb(230,137,11)" fg:x="824" fg:w="4"/><text x="95.9527%" y="991.50"></text></g><g><title>tc-rust`__rdl_alloc (1 samples, 0.12%)</title><rect x="96.1672%" y="981" width="0.1161%" height="15" fill="rgb(212,28,1)" fg:x="828" fg:w="1"/><text x="96.4172%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="96.3995%" y="965" width="0.1161%" height="15" fill="rgb(248,164,17)" fg:x="830" fg:w="1"/><text x="96.6495%" y="975.50"></text></g><g><title>tc-rust`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (22 samples, 2.56%)</title><rect x="94.0767%" y="997" width="2.5552%" height="15" fill="rgb(222,171,42)" fg:x="810" fg:w="22"/><text x="94.3267%" y="1007.50">tc..</text></g><g><title>tc-rust`tc_rust::input::bool_from_string (3 samples, 0.35%)</title><rect x="96.2834%" y="981" width="0.3484%" height="15" fill="rgb(243,84,45)" fg:x="829" fg:w="3"/><text x="96.5334%" y="991.50"></text></g><g><title>tc-rust`__rdl_alloc (1 samples, 0.12%)</title><rect x="96.5157%" y="965" width="0.1161%" height="15" fill="rgb(252,49,23)" fg:x="831" fg:w="1"/><text x="96.7657%" y="975.50"></text></g><g><title>tc-rust`csv::deserializer::deserialize_string_record (26 samples, 3.02%)</title><rect x="94.0767%" y="1013" width="3.0197%" height="15" fill="rgb(215,19,7)" fg:x="810" fg:w="26"/><text x="94.3267%" y="1023.50">tc-..</text></g><g><title>tc-rust`&lt;tc_rust::input::_::&lt;impl serde::de::Deserialize for tc_rust::input::Record&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (4 samples, 0.46%)</title><rect x="96.6318%" y="997" width="0.4646%" height="15" fill="rgb(238,81,41)" fg:x="832" fg:w="4"/><text x="96.8818%" y="1007.50"></text></g><g><title>tc-rust`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 5.92%)</title><rect x="93.4959%" y="1029" width="5.9233%" height="15" fill="rgb(210,199,37)" fg:x="805" fg:w="51"/><text x="93.7459%" y="1039.50">tc-rust`..</text></g><g><title>tc-rust`csv_core::reader::Reader::read_record (20 samples, 2.32%)</title><rect x="97.0964%" y="1013" width="2.3229%" height="15" fill="rgb(244,192,49)" fg:x="836" fg:w="20"/><text x="97.3464%" y="1023.50">t..</text></g><g><title>tc-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="99.4193%" y="1029" width="0.1161%" height="15" fill="rgb(226,211,11)" fg:x="856" fg:w="1"/><text x="99.6693%" y="1039.50"></text></g><g><title>tc-rust`alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="99.4193%" y="1013" width="0.1161%" height="15" fill="rgb(236,162,54)" fg:x="856" fg:w="1"/><text x="99.6693%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.12%)</title><rect x="99.4193%" y="997" width="0.1161%" height="15" fill="rgb(220,229,9)" fg:x="856" fg:w="1"/><text x="99.6693%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.12%)</title><rect x="99.4193%" y="981" width="0.1161%" height="15" fill="rgb(250,87,22)" fg:x="856" fg:w="1"/><text x="99.6693%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.12%)</title><rect x="99.4193%" y="965" width="0.1161%" height="15" fill="rgb(239,43,17)" fg:x="856" fg:w="1"/><text x="99.6693%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.12%)</title><rect x="99.4193%" y="949" width="0.1161%" height="15" fill="rgb(231,177,25)" fg:x="856" fg:w="1"/><text x="99.6693%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.12%)</title><rect x="99.4193%" y="933" width="0.1161%" height="15" fill="rgb(219,179,1)" fg:x="856" fg:w="1"/><text x="99.6693%" y="943.50"></text></g><g><title>dyld`start (858 samples, 99.65%)</title><rect x="0.0000%" y="1141" width="99.6516%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="858"/><text x="0.2500%" y="1151.50">dyld`start</text></g><g><title>tc-rust`main (858 samples, 99.65%)</title><rect x="0.0000%" y="1125" width="99.6516%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="858"/><text x="0.2500%" y="1135.50">tc-rust`main</text></g><g><title>tc-rust`std::rt::lang_start_internal (858 samples, 99.65%)</title><rect x="0.0000%" y="1109" width="99.6516%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="858"/><text x="0.2500%" y="1119.50">tc-rust`std::rt::lang_start_internal</text></g><g><title>tc-rust`std::rt::lang_start::_{{closure}} (858 samples, 99.65%)</title><rect x="0.0000%" y="1093" width="99.6516%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="858"/><text x="0.2500%" y="1103.50">tc-rust`std::rt::lang_start::_{{closure}}</text></g><g><title>tc-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (858 samples, 99.65%)</title><rect x="0.0000%" y="1077" width="99.6516%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="858"/><text x="0.2500%" y="1087.50">tc-rust`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tc-rust`tc_rust::main (847 samples, 98.37%)</title><rect x="1.2776%" y="1061" width="98.3740%" height="15" fill="rgb(234,130,49)" fg:x="11" fg:w="847"/><text x="1.5276%" y="1071.50">tc-rust`tc_rust::main</text></g><g><title>tc-rust`tc_rust::input::parse (56 samples, 6.50%)</title><rect x="93.1475%" y="1045" width="6.5041%" height="15" fill="rgb(254,6,2)" fg:x="802" fg:w="56"/><text x="93.3975%" y="1055.50">tc-rust`t..</text></g><g><title>tc-rust`csv::deserializer::deserialize_string_record (1 samples, 0.12%)</title><rect x="99.5354%" y="1029" width="0.1161%" height="15" fill="rgb(208,96,46)" fg:x="857" fg:w="1"/><text x="99.7854%" y="1039.50"></text></g><g><title>all (861 samples, 100%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="861"/><text x="0.2500%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.35%)</title><rect x="99.6516%" y="1141" width="0.3484%" height="15" fill="rgb(233,210,1)" fg:x="858" fg:w="3"/><text x="99.9016%" y="1151.50"></text></g></svg></svg>